%%-*- mode: erlang -*-
%% emqx_kafka_bridge config mapping

{mapping, "kafka.host", "emqx_kafka_bridge.broker", [
  {default, "localhost"},
  {datatype, string}
]}.

{mapping, "kafka.port", "emqx_kafka_bridge.broker", [
  {default, "9092"},
  {datatype, string}
]}.

{mapping, "kafka.partitionstrategy", "emqx_kafka_bridge.broker", [
  {default, "random"},
  {datatype, string}
]}.

{mapping, "kafka.partitionworkers", "emqx_kafka_bridge.broker", [
  {default, 4},
  {datatype, integer}
]}.

{mapping, "kafka.publishtopic", "emqx_kafka_bridge.broker", [
  {default, "message_publish"},
  {datatype, string}
]}.

{mapping, "kafka.deliveredtopic", "emqx_kafka_bridge.broker", [
  {default, "message_published"},
  {datatype, string}
]}.

{mapping, "kafka.ackedtopic", "emqx_kafka_bridge.broker", [
  {default, "message_acked"},
  {datatype, string}
]}.

{mapping, "kafka.clientconnecttopic", "emqx_kafka_bridge.broker", [
  {default, "client_connected"},
  {datatype, string}
]}.

{mapping, "kafka.clientdisconnecttopic", "emqx_kafka_bridge.broker", [
  {default, "client_disconnected"},
  {datatype, string}
]}.

{translation, "emqx_kafka_bridge.broker", fun(Conf) ->
  KafkaHost = cuttlefish:conf_get("kafka.host", Conf),
  KafkaPort = cuttlefish:conf_get("kafka.port", Conf),
  KafkaPartitionStrategy = cuttlefish:conf_get("kafka.partitionstrategy", Conf),
  KafkaPartitionWorkers = cuttlefish:conf_get("kafka.partitionworkers", Conf),
  KafkaPublishTopic = cuttlefish:conf_get("kafka.publishtopic", Conf),
  KafkaDeliveredTopic = cuttlefish:conf_get("kafka.deliveredtopic", Conf),
  KafkaAckedTopic = cuttlefish:conf_get("kafka.ackedtopic", Conf),
  KafkaClientConnectTopic = cuttlefish:conf_get("kafka.clientconnecttopic", Conf),
  KafkaClientDisconnectTopic = cuttlefish:conf_get("kafka.clientdisconnecttopic", Conf),
  [{host, KafkaHost}, {port, KafkaPort}, {partitionstrategy, KafkaPartitionStrategy}, {partitionworkers, KafkaPartitionWorkers}, {publishtopic, KafkaPublishTopic}, {deliveredtopic, KafkaDeliveredTopic}, {ackedtopic, KafkaAckedTopic}, {clientconnecttopic, KafkaClientConnectTopic}, {clientdisconnecttopic, KafkaClientDisconnectTopic}]
  end}.